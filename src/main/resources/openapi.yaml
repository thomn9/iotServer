openapi: 3.0.0
info:
  title: IOT Tofu Server
  description: 'IOT Tofu Server vytvořený v rámci kurzu Java SpringBootu'
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://tofu-iot-server.herokuapp.com
  - url: https://tofu-iot-server-test.herokuapp.com
  - url: http://localhost:8080
paths:
  /identification:
    get:
      summary: Načtení identifikace IOT serveru
      operationId: getIdentification
      responses:
        200:
          description: OK response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Identification'
        500:
          description: Something went horribly terribly wrong
  /meteorological-data:
    post:
      summary: Save meteorogical data
      operationId: saveMeteorologicalData
      requestBody:
        $ref: '#/components/requestBodies/MeteorologicalDataRequestBody'
      responses:
        200:
          description: OK response
        400:
          description: Invalid input
    get:
      summary: Get all saved meteorogical data
      operationId: getMeteorologicalData
      parameters:
        - name: pageSize
          in: query
          schema:
            type: integer
            maximum: 10
            default: 10
          required: true
        - name: pageNumer
          in: query
          schema:
            type: integer
            default: 0
          required: true
      responses:
        200:
          description: OK response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MeteorologicalDataWithTimeStampAndId'
components:
  schemas:
    Address:
      required:
        - city
      type: object
      properties:
        street:
          type: string
        number:
          type: string
        city:
          type: string
    Identification:
      required:
        - serverName
        - address
        - owner
      type: object
      properties:
        serverName:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        owner:
          $ref: '#/components/schemas/Owner'
    MeteorologicalDataBase:
      type: object
      properties:
        temperature:
          type: number
          format: float
          description: stupňů Celsia (°C)
        humidity:
          type: number
          format: float
          minimum: 0
          maximum: 100
          description: procent
        pressure:
          type: number
          format: float
        light:
          type: number
          format: float
    MeteorologicalDataWithTimeStampAndId:
      allOf:
        - $ref: '#/components/schemas/MeteorologicalDataBase'
      type: object
      required:
        - id
        - timestamp
      properties:
        id:
          type: integer
        timestamp:
          type: string
          format: date-time
    Owner:
      required:
        - firstName
        - lastName
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
  requestBodies:
    MeteorologicalDataRequestBody:
      description: Meteorogical data to save
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MeteorologicalDataBase'